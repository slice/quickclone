#!/usr/bin/env node

const snek = require('snekfetch')
const {spawn} = require('child_process')
const readline = require('readline')
const color = {
  red: '\u001b[31m',
  green: '\u001b[32m',
  cyan: '\u001b[36m',
  reset: '\u001b[0m'
}

// usage
if (process.argv.length !== 3) {
  console.error('usage: quickfetch [repo]')
  process.exit(1)
}

async function input (text) {
  return new Promise((resolve, reject) => {
    const rl = readline.createInterface({
      input: process.stdin,
      output: process.stdout
    })

    rl.question(text, answer => {
      rl.close()
      resolve(answer)
    })
  })
}

async function clone (url) {
  console.log('%sclone: %s%s', color.cyan, url, color.reset)

  let child = spawn('git', ['clone', url], {
    windowsHide: true
  })

  // pipe streams
  child.stdout.pipe(process.stdout)
  child.stderr.pipe(process.stderr)
}

async function search (query) {
  // use the github search api to search for repos
  let resp = await snek.get(
    'https://api.github.com/search/repositories?sort=star&q=' + encodeURIComponent(query)
  )

  if (!resp.ok) {
    console.error(
      `%sfailed to search github (%d %s)%s`,
      color.red, resp.status, resp.statusText, color.reset,
    )
    return
  }

  return resp.body.items
}

(async () => {
  const repos = await search(process.argv[2])

  if (!repos.length) {
    console.error('%serr: no results%s', color.red, color.reset)
    return
  }

  let repoInfo = null

  for (const repo of repos) {
    const resp = await input(
      color.green + repo.full_name + '?' + color.reset + ' '
    )
    if (resp.toLowerCase() === 'y') {
      repoInfo = repo
      break
    }
  }

  await clone(repoInfo.clone_url)
})()
